1a

1^2+2^2+...+n^2=(n(n+1)(2n+1))/6

caso base: n=1
1^2=1  -> 1*(2)*3/6=1  

hipotese indutiva:
1^2+2^2+...+k^2=(k(k+1)(2k+1))/6

passo indutivo:
    
    1^2+2^2+...+k^2+(k+1)^2=((k+1)(k+2)(2k+3))/6
 <=>  (k(k+1)(2k+1))/6 + (k+1)^2 = ....
 <=>  ((k(k+1)(2k+1)) + 6(k+1)^2)/6 = ...           // corta o 1/6
 <=> k(k+1)(2k+1)) + 6(k+1)^2 = (k+1)(k+2)(2k+3)
 <=> (k+1) (k(2k+1) + 6(k+1)) = (k+1)(k+2)(2k+3)    // corta o k+1
 <=> (k(2k+1) + 6(k+1)) = (k+2)(2k+3)
 <=> 2k^2 + k + 6k + 6 = 2k^2 + 3k + 4k + 6
 <=> 2k^2 + 7k + 6 = 2k^2 + 7k + 6  
                                                c.q.d


1b  

n! > 3^n  if n > 7

caso base:
n=7  -> 7! = 7*6*5*4*3*2*1 = 5040 > 2187

hipotese indutiva
k! > 3^k

passo indutivo

(k+1)! = k!(k+1) > 3^(k+1)
<=> k!(k+1) > 3^k * 3

Os 2 numeros da esquerda sao maiores que os da direita respetivamente por isso está provado


2
Function F (n)
    if n = 0 then
        s = 1
    else
        s = n ·F (n −1)
    return s


caso base:
F(0) = 0! = 1   it works

hipotese indutiva:

F(k) = k! 


passo indutivo:

    F(k+1) = (k+1)!
<=> F(k) * (k+1) = k! (k+1)
<=> k! * (k+1) = k! (k+1)       // cortar o k!
<=> k+1 = k+1    
                                c.q.d


3
Function IS(n, A)
    if n ≥2 then
    IS(n −1, A)
    i = n −1
    while i ≥1 and A[n] < A[i] do
        i = i −1
    i = i + 1
    p = A[n]
    j = n −1
    while j ≥i do
        A[j + 1] = A[j]
        j = j −1    
    A[i] = p


No fim A[i] <= A[j], Para todo 1<=i<=j<=N


caso base:
IS(1,A) => A[i] <= A[j]  Para todo 1<=i<=j<=N 


hipotese indutiva: k < n
IS(k,A) => A[i] <= A[j]  Para todo 1<=i<=j<=k


passo indutivo:  k+1 <= n

    IS(k+1,A)
<=> A[i] <= A[k+1] para todo i <= i <= k+1

Para provar devemos decrever o algoritmo de forma a provar que funciona como suposto.


4.

P variavel global (tem de ser acedido por todos) ou por referencia
P pode ser matriz 400x400 iniciada a false em todos, hash table ou árvore

F(x,y,m):
    if(m==0):
        if(x, y) in P:
            return 0
        else:
            P.add((x,y))
            return 1
    else:
        v=0
        if (x,y) not in P:
            P.add((x,y))
            v=1
        return v + F(x+1,y+1,m-1) + F(x+2,y-1,m-1)++ F(x-2,y+1,m-1) + F(x-2,y-1,m-1) + F(x+1,y+2,m-1) + F(x+1,y-2,m-1) + F(x-1,y+2,m-1) + F(x-1,y-2,m-1)
